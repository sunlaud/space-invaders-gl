
-- defines function used in config file and binds it to corresponding scala object
function defineMutablesConfigurator(configLuaFcn, scalaObj)
	_G[configLuaFcn] = function(luaConfig)
		for k, v in pairs(luaConfig) do
			-- cope with weird scala autogenerated methods for 'var' properties
			-- TODO: check if this hack is portable and/or documented
			local setter = scalaObj[k.."_$eq"]
			if setter then setter(scalaObj, v) end
		end
	end
end


function printObj(object)
	for k,v in pairs(object) do
	    print("   "..k.."="..tostring(v))
	end
end

-- allows lua proxy creation to be initiated from scala-side
function getImplementor(self, javaName, luaObject)
	print("getImplementor, javaName=" .. javaName .. ", luaObject=")
	printObj(luaObject)
	return luajava.createProxy(javaName, luaObject)
end
